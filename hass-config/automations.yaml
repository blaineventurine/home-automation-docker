- alias: Set theme at startup
  trigger:
    platform: homeassistant
    event: start
  action:
    service: frontend.set_theme
    data:
      name: Dark - Green

- alias: Turn on front lights at sundown
  trigger:
    platform: sun
    event: sunset
    offset: "-00:30:00"
  action:
    - service: light.turn_on
      data:
        entity_id: 
          - light.couch_light
          - light.porch_light
    # - service: switch.turn_on
    #   data:
    #     entity_id: switch.diningroomlamp

- alias: Turn off porch light at sunrise
  trigger:
    platform: sun
    event: sunrise
    offset: 00:20:00
  action:
  - service: light.turn_off
    data:
      entity_id: light.porch_light

- alias: Turn off living room couch light at 1 am
  trigger:
    platform: time
    at: "01:00:00"
  action:
  - service: light.turn_off
    data:
      entity_id:
        - light.couch_light

- alias: Roomba bin full
  trigger:
    platform: template
    value_template: "{%if is_state_attr('vacuum.roomba', 'bin_full', true) %}true{%endif%}"
  action:
  - service: notify.mobile_app_blaines_phone
    data:
      message: 'Roomba bin is full, please empty it'

- alias: Roomba is stuck
  trigger:
    platform: template
    value_template: "{%if is_state_attr('vacuum.roomba', 'status', 'Stuck') %}true{%endif%}"
  action:
  - service: notify.mobile_app_blaines_phone
    data:
      message: 'Roomba got stuck'

- alias: Start Roomba while we are away
  trigger:
     platform: state
     entity_id: group.all_people
     from: 'home'
     to: 'not_home'
     for:
      hours: 1
  condition:
    condition: and
    conditions:      
     - condition: time  
       after: '10:00:00'
       before: '18:00:00'     
     - condition: template
       value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.start_roomba_while_we_are_away.attributes.last_triggered) | int > 86400 }}'
  action:
    - service: vacuum.turn_on
      data:
       entity_id: vacuum.roomba
    - service: notify.mobile_app_blaines_phone
      data:
        message: 'Roomba started'

- alias: Turn heat down when away
  trigger:
    platform: state
    entity_id: group.all_people
    from: 'home'
    to: 'not_home'
    for:
      minutes: 30
  condition:     
      - condition: numeric_state
        entity_id: sensor.dark_sky_temperature
        below: 45
  action:
    - service: climate.turn_on
      entity_id: climate.dining_room_nest
    - service: climate.set_temperature
      data:
        entity_id: climate.dining_room_nest
        temperature: 55
        operation_mode: Heat

- alias: Turn off office lights if no motion detected
  trigger:
    platform: state
    entity_id: group.office_motion_sensors
    to: 'off'
    for:
      minutes: 10
  action:
    service: switch.turn_off
    data:
      entity_id:
        - switch.office_lights

- alias: Turn on office lights if I'm at my desk
  trigger:
    platform: state
    entity_id: binary_sensor.desk_motion_sensor
    to: 'on'
  action:
    service: switch.turn_on
    data:
      entity_id:
        - switch.office_lights

- alias: Turn on humidifier if humidity below 55%
  trigger:
    platform: state
    entity_id: sensor.pi_one_humidity
  action:
    service_template: >-
      {% set humidity = states('sensor.pi_one_humidity') | float %}
      {% if humidity > 70 %}
        switch.turn_off
      {% elif humidity < 55 %}
        switch.turn_on
      {% endif %}
    entity_id: switch.humidifier

- alias: Toggle lights by voice
  trigger:
    - event_data: {}
      event_type: rhasspy_ChangeLightState
      platform: event
  condition: []
  action:
    - alias: ''
      data_template:
        light_name: "group.{{ trigger.event.data.light_name }}"
        light_state: "{{ trigger.event.data.light_state }}"
      service: script.rhasspy_light_state   

- alias: Say the time
  trigger:
    platform: event
    event_type: rhasspy_GetTime
  action:
    service: rest_command.marytts
    data_template:
      message: "It is {{ now().strftime('%I') | int }} {{ now().strftime('%M %p') }}."

- alias: Say the temperature
  trigger:
    platform: event
    event_type: rhasspy_GetTemperature
  action:
    service: rest_command.marytts
    data_template:
      message: "It is {{ states('sensor.dark_sky_temperature') }} degrees."

- alias: Start the Roomba
  trigger:
    platform: event
    event_type: rhasspy_StartRoomba
  action:
    - service: vacuum.turn_on
      data:
       entity_id: vacuum.roomba


# - alias: Say the forecast
#   trigger:
#     platform: event
#     event_type: rhasspy_GetForecast
#   action:
#     service: rest_command.marytts
#     data_template:
#       message: "It's currently {{states ('sensor.dark_sky_summary.state') }} and {{states.sensor.dark_sky_temperature.state|round}} degrees."
#       {% if is_state("sensor.allergy_season", "True")  %}
#       "The pollen level for today is {{states.sensor.pollen_level.state}} or {{states.sensor.pollen_index.state}} percent."
#       {% endif %}
#       {% if is_state("sensor.flu_season", "True") %}
#       "The flu risk for today is {{states.sensor.cold_flu_risk.state}} or {{states.sensor.cold_flu_percentage.state}} percent."
#       {% endif %}
#       "Today you can expect {{states.sensor.dark_sky_hourly_summary.state}} with a high of {{states.sensor.dark_sky_daily_high_temperature.state|round|int}} and a low of {{states.sensor.dark_sky_daily_low_temperature.state|round|int}}."
#       {% if states (weather.dark_sky.wind_speed') |int > 10 %}
#       "Be advised it is windy outside."
#       {% endif %}
  
# - alias: Turn on Amazon Prime Video/Netflix/Hulu

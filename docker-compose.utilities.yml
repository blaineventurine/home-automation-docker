version: "3.7"
services:
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    ports:
      - "${LOCAL_IP}:53:53/tcp"
      - "${LOCAL_IP}:53:53/udp"
      # - "${LOCAL_IP}:80:80/tcp"
      - "${LOCAL_IP}:7443:443/tcp"
      - "${LOCAL_IP}:7080:80/tcp"
    # cap_add:
    #   - NET_ADMIN
    # depends_on:
    #   - traefik
    environment:
      # ServerIP: ${LOCAL_IP}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      VIRTUAL_PORT: 80
      # DNS1: 192.168.1.2#5322
      # DNS1: ${LOCAL_IP}#5322
      DNS1: 1.1.1.1
      DNS2: "no"
      IPv6: "no"
      TZ: ${TZ}
      DNSSEC: "true"
      # PROXY_LOCATION: pihole
    volumes:
      - ${USERDIR}/pihole:/etc/pihole
      # make sure to manually create this log file before first run
      - ${USERDIR}/pihole/log/pihole.log:/var/log/pihole.log
      # - /etc/dnsmasq.d:/etc/dnsmasq.d
      # - ${USERDIR}/pihole/misc/dnsmasq.leases:/var/lib/misc/dnsmasq.leases
      # - ${USERDIR}/pihole/dnsmasq.d/:/etc/dnsmasq.d/
    restart: always
    dns:
      - 127.0.0.1
      - 1.1.1.1

  portainer:
    container_name: portainer
    restart: always
    image: portainer/portainer-ce:latest
    volumes:
      - ${USERDIR}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9000:9000"
    environment:
      - TZ=${TZ}

  # ipam:
  #   container_name: ipam
  #   depends_on:
  #     - mariadb
  #   image: pierrecdn/phpipam:latest
  #   volumes:
  #     - ${USERDIR}/phpipam:/var/www/
  #   environment:
  #     - MYSQL_ENV_MYSQL_USER=${MYSQL_ROOT_USER}
  #     - MYSQL_ENV_MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
  #     - MYSQL_ENV_MYSQL_HOST=mariadb
  #     - MYSQL_ENV_MYSQL_DB=${PHPIPAM_DATABASE}
  #   ports:
  #     - "3280:80"

  watchtower:
    container_name: watchtower
    hostname: watchtower
    restart: always
    image: v2tec/watchtower:latest
    depends_on:
      - "pihole"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup

  duplicati:
    image: duplicati/duplicati:latest
    container_name: duplicati
    restart: always
    network_mode: "bridge"
    ports:
      - "8200:8200"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${USERDIR}/duplicati/config:/config
      - ${USERDIR}/duplicati/data:/data/Duplicati
      - ${BACKUP_DIR}/duplicatiBackups:/backups
      - ${USERDIR}:/source
      - /etc/localtime:/etc/localtime:ro

  netdata:
    image: titpetric/netdata:latest
    container_name: netdata
    restart: always
    networks:
      - traefik_proxy
    ports:
      - 19999:19999
    volumes:
      - ${USERDIR}/netdata/proc:/host/proc:ro
      - ${USERDIR}/netdata/sys:/host/sys:ro
      - ${USERDIR}/netdata/var/run/docker.sock:/var/run/docker.sock:ro

  gitlab:
    container_name: gitlab
    restart: always
    image: sameersbn/gitlab:latest
    ports:
      - "10080:80"
      - "10443:443"
      - "10022:22"
    environment:
      - DEBUG=true
      - DB_ADAPTER=postgresql
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${GITLAB_POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TZ={TZ}
      - GITLAB_SIGNUP_ENABLED=false
      - GITLAB_HOST=${GITLAB_HOSTNAME}
      - GITLAB_HTTPS=false
      - GITLAB_PORT=80
      - GITLAB_SSH_PORT=10022
      - GITLAB_SECRETS_DB_KEY_BASE=${GITLAB_SECRETS_DB_KEY_BASE}
      - GITLAB_SECRETS_SECRET_KEY_BASE=${GITLAB_SECRETS_SECRET_KEY_BASE}
      - GITLAB_SECRETS_OTP_KEY_BASE=${GITLAB_SECRETS_OTP_KEY_BASE}
      - GITLAB_ROOT_PASSWORD=${GITLAB_ROOT_PASSWORD}
      - GITLAB_ROOT_EMAIL=${GITLAB_ROOT_EMAIL}
      - GITLAB_REGISTRY_ENABLED=true
      # - GITLAB_REGISTRY_HOST=registry.${DOMAINNAME}
      - GITLAB_REGISTRY_HOST=http://${LOCAL_IP}:5000
      - GITLAB_REGISTRY_PORT=5000
      - GITLAB_REGISTRY_API_URL=http://${LOCAL_IP}:5000
      # - GITLAB_REGISTRY_API_URL=https://registry.${DOMAINNAME}:5000
      - GITLAB_REGISTRY_KEY_PATH=/certs/registry.key
      # - GITLAB_REGISTRY_GENERATE_INTERNAL_CERTIFICATES=true
      # - GITLAB_REGISTRY_ISSUER=gitlab-issuer
      # - SSL_REGISTRY_KEY_PATH=/certs/registry.key
      # - SSL_REGISTRY_CERT_PATH=/certs/registry.crt
      # - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/certs/registry.crt
    networks:
      - traefik_proxy
      - default
    volumes:
      # - ${MEDIA_PATH}/gitlab/config:/etc/gitlab
      # - ${MEDIA_PATH}/gitlab/logs:/var/log/gitlab
      # - ${MEDIA_PATH}/gitlab/data:/var/opt/gitlab
      - ${MEDIA_PATH}/gitlab:/home/git/data
      - ${USERDIR}/certs:/certs
    depends_on:
      - redis
      - postgresql
    labels:
      - "traefik.enable=true"
      - "traefik.backend=gitlab"
      - "traefik.frontend.rule=Host:gitlab.${DOMAINNAME}"
      #- "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /plex"
      - "traefik.port=80"
      # - "traefik.protocol=https"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
      - "traefik.frontend.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.frontend.headers.contentSecurityPolicy=upgrade-insecure-requests"
      - "traefik.frontend.headers.customResponseHeaders=X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
      - com.centurylinklabs.watchtower.enable="false" 

# might need to do this to register:
# docker run --rm -it -v ${USERDIR}/gitlab/runners/1:/etc/gitlab-runner gitlab/gitlab-runner register 
  gitlab-runner:
    container_name: gitlab-runner
    image: gitlab/gitlab-runner:latest
    environment:
      - CI_SERVER_URL=https://${GITLAB_HOSTNAME}/
      - RUNNER_TOKEN=${GITLAB_RUNNER_ONE_TOKEN}
      - RUNNER_DESCRIPTION=runner-one
      - RUNNER_EXECUTOR=docker
    volumes:
      - ${MEDIA_PATH}/gitlab/runners/1:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - default
    links:
      - gitlab

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ${USERDIR}/redis/data:/var/lib/redis
      - ${USERDIR}/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - /etc/localtime:/etc/localtime:ro
    command:
      - --loglevel warning
    networks:
      - default

  postgresql:
    image: postgres:latest
    container_name: postgresql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${GITLAB_POSTGRES_DB}
      - DB_EXTENSION=pg_trgm
    volumes:
      - ${USERDIR}/postgresData:/var/lib/postgresql/data
      #- ${USERDIR}/postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - default
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    depends_on:
      - postgresql
    ports:
      - "5050:80"
    volumes:
      # sudo chown -R 5050:5050 pgadmin, otherwise you get permissions errors
      - ${USERDIR}/pgadmin:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${POSTGRES_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}

  paperless-webserver:
    container_name: paperless-web
    restart: always
    image: thepaperlessproject/paperless:latest
    ports:
      - "8000:8000"
    volumes:
      - ${USERDIR}/paperless/data:/usr/src/paperless/data
      - ${MEDIA_PATH}/Documents:/usr/src/paperless/media
      - /etc/localtime:/etc/localtime:ro
    # The reason the line is here is so that the webserver that doesn't do
    # any text recognition and doesn't have to install unnecessary
    # languages the user might have set in the env-file by overwriting the
    # value with nothing.
    environment:
      - TZ=${TZ}
      - PAPERLESS_OCR_LANGUAGES=
    command: ["runserver", "--insecure", "0.0.0.0:8000"]

  paperless-consumer:
    container_name: paperless-consumer
    restart: always
    image: thepaperlessproject/paperless:latest
    environment:
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/paperless/data:/usr/src/paperless/data
      - ${MEDIA_PATH}/Documents:/usr/src/paperless/media
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_PATH}/scannedFiles:/consume
      - ${MEDIA_PATH}/Documents/export:/export
    command: ["document_consumer"]

  registry:
    container_name: registry
    image: registry:latest
    restart: always
    ports:
      - "5000:5000"
    environment:
      - REGISTRY_LOG_LEVEL=debug
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/registry
      - REGISTRY_REDIS_ADDR=${LOCAL_IP}:6379
      - REGISTRY_REDIS_PASSWORD=${REDIS_PASSWORD}
      - REGISTRY_AUTH_TOKEN_REALM=https://${GITLAB_HOSTNAME}/jwt/auth
      - REGISTRY_AUTH_TOKEN_SERVICE=container_registry
      - REGISTRY_AUTH_TOKEN_ISSUER=gitlab-issuer
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/certs/registry.crt
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - ${MEDIA_PATH}/docker-registry:/registry
      - ${USERDIR}/certs:/certs:ro
  #   restart: always
    links:
      - portus
      - gitlab
    labels:
      - "traefik.enable=true"
      - "traefik.backend=registry"
      - "traefik.frontend.rule=Host:registry.${DOMAINNAME}"
      #- "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /plex"
      - "traefik.port=5000"
      # - "traefik.protocol=https"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
      - "traefik.frontend.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.frontend.headers.contentSecurityPolicy=upgrade-insecure-requests"
      - "traefik.frontend.headers.customResponseHeaders=X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
      - com.centurylinklabs.watchtower.enable="false" 
    networks:
      - default
      - traefik_proxy

  portus:
    container_name: portus
    image: opensuse/portus:latest
    ports:
      - "3000:3000"
    environment:
      - PORTUS_CHECK_SSL_USAGE_ENABLED='false'
      - RAILS_SERVE_STATIC_FILES='true'
      - PORTUS_DB_HOST=${LOCAL_IP}
      - PORTUS_DB_USERNAME=${PORTUS_DB_USER}
      - PORTUS_DB_PASSWORD=${PORTUS_DB_PASSWORD}
      - PORTUS_DB_DATABASE=${PORTUS_DB}
      - PORTUS_SECRET_KEY_BASE=${PORTUS_SECRET_KEY_BASE}
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}
      - PORTUS_KEY_PATH=/certificates/registry.key
    volumes:
      - ${USERDIR}/portus:/srv/Portus/public
      - ${USERDIR}/certs:/certificates:ro
      # thanks to a bug, it won't initialize without this
    entrypoint:
      - /bin/sh
      - /init
    links:
      - mariadb